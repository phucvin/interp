name: tests

on: [push, pull_request]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    name: build-linux-${{ matrix.config.target }}
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        config:
        - {target: clang,       cc: clang,      }
        - {target: clang-x86,   cc: clang,      flags: "-m32",    install: "gcc-multilib"   }
        - {target: gcc,         cc: gcc,        }
        - {target: gcc-debug,   cc: gcc,        flags: "-O0 -g3"   }
        - {target: gcc-x86,     cc: gcc,        flags: "-m32",    install: "gcc-multilib"   }

    steps:
    - uses: actions/checkout@v2
    - name: Install ${{ matrix.config.install }}
      if: ${{ matrix.config.install }}
      run: |
        sudo apt update
        sudo apt install ${{ matrix.config.install }}
    - name: Build
      run: |
        ${{ matrix.config.cc }} main.c -I./src -Os -fPIC ${{ matrix.config.flags }} -o ./interp
    - name: Test
      run: |
        ./interp
        
  build-mac:
    runs-on: macos-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: |
        clang main.c -I./src -Os -fPIC -o ./interp
    - name: Test
      run: |
        ./interp
        
  build-windows:
    runs-on: windows-latest
    name: build-windows-${{ matrix.config.target }}
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        config:
        - {target: clang,       cc: clang,      }
        - {target: clang-x86,   cc: clang,      flags: "-m32"  }

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        clang-cl main.c /I./src/ /Os /Oy /Fe ./interp.exe
    - name: Test
      run: |
        ./interp.exe

  build-wasi:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
    - name: Install Python dependencies
      run: |
        python3 -m pip install pip==20.1.1
        python3 -m pip install --upgrade setuptools wheel
        pip3 --version
    - name: Install Wasienv
      env:
        WASMER_RELEASE_TAG: "0.17.1"
      run: curl https://raw.githubusercontent.com/wasienv/wasienv/master/install.sh | sh
    - name: Build
      run: |
        source $HOME/.wasienv/wasienv.sh
        wasicc main.c -I./src -Os -o interp.wasm
    - name: Test
      run: |
        source $HOME/.wasmer/wasmer.sh
        wasmer interp.wasm

  build-cross-qemu:
    runs-on: ubuntu-latest
    name: build-cross-qemu-${{ matrix.config.target }}
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        config:
        - {target: arm,     toolchain: gcc-arm-linux-gnueabi,     cc: arm-linux-gnueabi-gcc,      qemu: qemu-arm-static     }
        - {target: armhf,   toolchain: gcc-arm-linux-gnueabihf,   cc: arm-linux-gnueabihf-gcc,    qemu: qemu-arm-static     }
        - {target: aarch64, toolchain: gcc-aarch64-linux-gnu,     cc: aarch64-linux-gnu-gcc,      qemu: qemu-aarch64-static }
        - {target: riscv64, toolchain: gcc-riscv64-linux-gnu,     cc: riscv64-linux-gnu-gcc,      qemu: qemu-riscv64-static }
        - {target: mips,    toolchain: gcc-mips-linux-gnu,        cc: mips-linux-gnu-gcc,         qemu: qemu-mips-static     }
        - {target: mipsel,  toolchain: gcc-mipsel-linux-gnu,      cc: mipsel-linux-gnu-gcc,       qemu: qemu-mipsel-static   }

    steps:
    - uses: actions/checkout@v2
    - name: Install QEMU
      env:
        QEMU_SRC: "http://archive.ubuntu.com/ubuntu/pool/universe/q/qemu"
        QEMU_VER: "qemu-user-static_4\\.2-.*_amd64.deb$"
      run: |
        DEB=`curl -s $QEMU_SRC/ | grep -o -E 'href="([^"#]+)"' | cut -d'"' -f2 | grep $QEMU_VER | tail -1`
        wget $QEMU_SRC/$DEB
        sudo dpkg -i $DEB
    - name: Install ${{ matrix.config.toolchain }}
      run: |
        sudo apt update
        sudo apt install ${{ matrix.config.toolchain }}
    - name: Build
      run: |
        ${{ matrix.config.cc }} main.c -I./src -Os -fPIC -lm -static -o ./interp
    - name: Test
      run: |
        ${{ matrix.config.qemu }} ./interp

  build-platformio:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install -U platformio
    - name: Build
      run: pio run
